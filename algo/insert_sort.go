package algo

// 插入排序
// 增量算法
// 原址排序
// 稳定性：稳定排序
// 时间复杂度：O(n^2)。最好O(n)，最坏：O(n^2)
// 循环不变式：
//		第 i 次循环时，子数组 lst[0...i - 1]已经排好序，本次循环则是将 lst[i]插入到子数组中合适的位置，形成已排序的新子数组 lst[0...i]
//		子数组 lst[0...i - 1]中的元素总是由子数组 lst[0...i - 1]原来的元素构成，不同在于已经排好序了
//		当循环终止时，子数组便是整个数组本身，如此，整个数组都已经排好序
func InsertSort(lst []int) {
	// 从第二个元素开始遍历到最后一个元素
	for i, l := 1, len(lst); i < l; i++ {
		// 将第 i 个元素插入到前面子数组的适当位置
		// 先将该元素存到临时变量中，空出当前位置让子数组的元素可以往后移动
		curr := lst[i]
		j := i - 1
		for ; j >= 0; j-- {
			// 如果当前位置元素比 curr 大，则往后面移，否则跳出循环
			if lst[j] <= curr {
				break
			}

			// 往后移
			lst[j + 1] = lst[j]
		}

		// 插入到 j 的后面
		lst[j + 1] = curr
	}
}
